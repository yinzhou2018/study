/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    kotlin("multiplatform")
}

repositories {
    mavenCentral()
    maven("https://maven.pkg.jetbrains.space/public/p/kotlinx/maven")
}

kotlin {
    macosArm64()
    mingwX64()

    targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {
        compilations.getByName("main") {
            cinterops {
              val simple_lib by creating
            }
        }

        binaries {
            executable {
                entryPoint = "com.example.main"
                baseName = "mp_playground"
            }
        }

        binaries.all {
            freeCompilerArgs += "-g"
        }
    }

    // sourceSets {
    //     val nativeMain by creating {
    //         dependencies {
    //             implementation("org.jetbrains.kotlinx:kotlinx-cinterop-core:1.9.20")
    //         }
    //     }
    // }
}

// 重构 CMake 构建任务
abstract class BuildCLibTask : DefaultTask() {
    @get:Inject
    abstract val execOperations: ExecOperations
    
    private val cmakeDir = project.file("build/cmake")
    
    init {
        inputs.files(project.fileTree("native"))
        outputs.dir(cmakeDir)
    }
    
    @TaskAction
    fun build() {
        cmakeDir.mkdirs()
        
        execOperations.exec {
            workingDir = cmakeDir
            commandLine("cmake", "../../native")
        }
        execOperations.exec {
            workingDir = cmakeDir
            commandLine("cmake", "--build", ".")
        }
    }
}

tasks.register<BuildCLibTask>("buildCLib")

// 让Kotlin编译依赖于C库构建
tasks.matching { it.name.contains("compile") }.configureEach {
    dependsOn("buildCLib")
}
