/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.13/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins { kotlin("multiplatform") }

repositories {
  mavenCentral()
  maven("https://maven.pkg.jetbrains.space/public/p/kotlinx/maven")
}

val isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows
val isX64 = System.getProperty("os.arch").matches(Regex("^(amd64|x86_64)$", RegexOption.IGNORE_CASE))
val targetName =  if (isWindows) "MingwX64" else if (isX64) "MacosX64" else "MacosArm64"
val folderName = if (isWindows) "mingwX64" else if (isX64) "macosX64" else "macosArm64"
val targetDir = "${project.projectDir}/build/bin/$folderName/debugExecutable"

kotlin {
  macosArm64()
  macosX64()
  mingwX64()

  targets.withType<org.jetbrains.kotlin.gradle.plugin.mpp.KotlinNativeTarget> {
    compilations.getByName("main") {
      cinterops {
        val generatedDefFile = project.layout.buildDirectory.file("generated/def/simple_lib.def")
        val defContent =
                """
                    headers = simple_lib.h
                    headerFilter = simple_lib.h
                    
                    compilerOpts = "-I${project.projectDir}/native"
                    linkerOpts = "-L${targetDir}" -lsimple_lib
                """.trimIndent()

        val defDir = project.layout.buildDirectory.dir("generated/def")
        defDir.get().asFile.mkdirs()
        generatedDefFile.get().asFile.writeText(defContent)

        val simple_lib by creating {
          defFile(generatedDefFile)
          includeDirs("native")
          packageName("simple_lib")
        }

        if (!isWindows) { 
          val generatedMacDefFile = project.layout.buildDirectory.file("generated/def/macos_lib.def")
          val macDefContent =
                  """
                      language = Objective-C
                      headers = macos_lib.h
                      headerFilter = macos_lib.h
                      compilerOpts = "-I${project.projectDir}/macos_native"
                      linkerOpts = "-F${targetDir}" -framework macos_lib
                  """.trimIndent()
          generatedMacDefFile.get().asFile.writeText(macDefContent)

          val macos_lib by creating {
            defFile(generatedMacDefFile)
            includeDirs("macos_native")
            packageName("macos_lib")
          }
        }
      }
    }

    binaries {
      executable {
        entryPoint = "com.example.main"
        baseName = "mp_playground"
      }
    }

    binaries.all { 
      freeCompilerArgs += "-g" 
      if (!isWindows) {
        linkerOpts("-Wl,-rpath,@executable_path")
      }
    }
  }
}

tasks.register("buildNativeLibrary") {
  group = "build"
  description = "Builds the native Library."
  
  val cmakeDir = project.file("build/cmake")
  cmakeDir.mkdirs()

  doFirst {
    exec {
      workingDir = cmakeDir
      if (isWindows) {
        commandLine(
                "cmake",
                "-DCMAKE_EXPORT_COMPILE_COMMANDS=TRUE",
                "-DCMAKE_C_COMPILER=gcc.exe",
                "-DCMAKE_CXX_COMPILER=g++.exe",
                "-DOUTPUT_DIR=${targetDir}",
                "-G",
                "MinGW Makefiles",
                "../../native"
        )
      } else {
        commandLine("cmake", "-DOUTPUT_DIR=${targetDir}", "../../native")
      }
    }
    exec {
      workingDir = cmakeDir
      commandLine("cmake", "--build", ".")
    }
  }

  if (!isWindows) {
    val cmakeDir = project.file("build/macos_cmake")
    cmakeDir.mkdirs()
    doLast {
      exec {
        workingDir = cmakeDir
        commandLine("cmake", "-DOUTPUT_DIR=${targetDir}", "../../macos_native")
      }
      exec {
        workingDir = cmakeDir
        commandLine("cmake", "--build", ".")
      }
    }
  }
}

// 让Kotlin编译依赖于C库构建
tasks.matching { it.name.contains("compile") }.configureEach { dependsOn("buildNativeLibrary") }
