cmake_minimum_required(VERSION 3.20.0)
project(playground VERSION 0.1.0 LANGUAGES C CXX OBJC OBJCXX)

include(CTest)
enable_testing()

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Statically link the C/C++ runtime libraries
if (MSVC)
  set(CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /MT")
  set(CMAKE_C_FLAGS_DEBUG "${CMAKE_C_FLAGS_DEBUG} /MTd")
  set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MT")
  set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MTd")
elseif (MINGW)
  set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -static-libgcc -static-libstdc++")
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -static-libgcc -static-libstdc++")
endif()

file(GLOB_RECURSE DIR_SRCS RELATIVE ${CMAKE_SOURCE_DIR} *.cpp *.c *.cc *.mm *.m)
list(FILTER DIR_SRCS EXCLUDE REGEX "^build/")

if (NOT WIN32)
  list(FILTER DIR_SRCS EXCLUDE REGEX "^windows/")
endif()
if (NOT APPLE)
  list(FILTER DIR_SRCS EXCLUDE REGEX "^mac/")
endif()

if (NOT MINGW)
  add_executable(playground ${DIR_SRCS})
else()
  add_executable(playground main.cpp)
endif()

if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
  target_link_libraries(playground pthread)
elseif(WIN32)
  if (CMAKE_BUILD_TYPE STREQUAL "Release")
    add_compile_definitions(WINRT_LEAN_AND_MEAN)
  endif()
  # add_compile_definitions(USE_CPP_WINRT)
  target_link_libraries(playground d3d11 dxgi dxguid windowsapp Shcore)
elseif(APPLE)
  set(CMAKE_OSX_DEPLOYMENT_TARGET "12.3")
  target_link_libraries(playground "-framework ApplicationServices -framework CoreMedia -framework CoreVideo -framework Foundation -framework Cocoa")
  target_link_options(playground PRIVATE "-weak_framework" "ScreenCaptureKit")
  target_compile_options(playground PRIVATE -Werror=objc-method-access)  
  set(CMAKE_OBJC_FLAGS "${CMAKE_OBJC_FLAGS} -fobjc-arc")
  set(CMAKE_OBJCXX_FLAGS "${CMAKE_OBJCXX_FLAGS} -fobjc-arc")
endif()

set(CPACK_PROJECT_NAME ${PROJECT_NAME})
set(CPACK_PROJECT_VERSION ${PROJECT_VERSION})
include(CPack)
